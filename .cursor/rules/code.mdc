---
description: 
globs: 
alwaysApply: true
---
実装前にcode.mdcを確認し、その他に内容に沿って進めると宣言をすること

[README.md](mdc:README.md)をまず確認する。

命名規則
- ファイル名、メソッド名、変数にはsnake_caseを使用する。
- クラス名とモジュール名にはキャメルケースを使用する。
- モデル、コントローラ、ビューにはRailsの命名規則に従ってください。
- ルーティングでアクションを制限する場合は%i[index show]のように記述すること

コードのスタイルと構造
- 簡潔で慣用的なRubyコードを、正確な例とともに書くこと。
- Railsの規約とベストプラクティスに従ってください。
- オブジェクト指向と関数型のプログラミング パターンを適宜使用する。
- コードの重複よりも反復とモジュール化を優先する。
- 説明的な変数名やメソッド名を使用する (例: user_signed_in?, calculate_total)。
- Railsの規約（MVC、懸念、ヘルパーなど）に従ってファイルを構造化する。

構文と書式
- Rubyスタイルガイドに従う (https://rubystyle.guide/)
- Rubyの表現力豊かな構文を使う（unless、||=、&など）。
- 補間が必要な場合を除き、文字列は単一引用符で囲む。

エラー処理と検証
- 例外は、制御フローではなく、例外的な場合に使いましょう。
- 適切なエラーログとユーザーフレンドリーなメッセージを実装する。
- モデルでは ActiveModel バリデーションを使用する。
- コントローラ内でエラーを優雅に処理し、適切なフラッシュメッセージを表示する。

エラー処理と検証
- 例外は、制御フローではなく、例外的な場合に使いましょう。
- 適切なエラーログとユーザーフレンドリーなメッセージを実装する。
- モデルでは ActiveModel バリデーションを使用する。
- コントローラ内でエラーを優雅に処理し、適切なフラッシュメッセージを表示する。
- specディレクトリ配下は絶対に編集しないこと(現状の動作を担保するため)
  - ただしこちらで指示した場合の追加に関しては許可する

UI とスタイリング
- Tailwind, Turbo, Stimulusを使って使いやすいUI/UXを実現する
- ボタンなどのコンポーネントにできそうなスタイルはviews/componentsですでに定義されてないかを必ず確認し、定義されていれば使用、なければ必要に応じて作成すること
- アイコンを追加するときはSVGファイルを作成してhelperから参照すること(app/helpers/icon_helper.rb)
